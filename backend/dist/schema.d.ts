import { z } from 'zod';
export declare const userSchema: z.ZodObject<{
    user_id: z.ZodString;
    email: z.ZodString;
    password_hash: z.ZodString;
    first_name: z.ZodString;
    last_name: z.ZodString;
    phone_number: z.ZodNullable<z.ZodString>;
    date_of_birth: z.ZodNullable<z.ZodString>;
    loyalty_tier: z.ZodNullable<z.ZodString>;
    email_verified: z.ZodBoolean;
    notification_preferences: z.ZodString;
    fragrance_profile: z.ZodNullable<z.ZodString>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    email?: string;
    password_hash?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: string;
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
    created_at?: Date;
    updated_at?: Date;
}, {
    user_id?: string;
    email?: string;
    password_hash?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: string;
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
    created_at?: Date;
    updated_at?: Date;
}>;
export declare const createUserInputSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
    first_name: z.ZodString;
    last_name: z.ZodString;
    phone_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    date_of_birth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    loyalty_tier: z.ZodOptional<z.ZodNullable<z.ZodEnum<["bronze", "silver", "gold", "platinum"]>>>;
    email_verified: z.ZodDefault<z.ZodBoolean>;
    notification_preferences: z.ZodDefault<z.ZodString>;
    fragrance_profile: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
    password?: string;
}, {
    email?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
    password?: string;
}>;
export declare const updateUserInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    phone_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    date_of_birth: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    loyalty_tier: z.ZodOptional<z.ZodNullable<z.ZodEnum<["bronze", "silver", "gold", "platinum"]>>>;
    email_verified: z.ZodOptional<z.ZodBoolean>;
    notification_preferences: z.ZodOptional<z.ZodString>;
    fragrance_profile: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    email?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
}, {
    user_id?: string;
    email?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    date_of_birth?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    notification_preferences?: string;
    fragrance_profile?: string;
}>;
export declare const searchUsersInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    loyalty_tier: z.ZodOptional<z.ZodEnum<["bronze", "silver", "gold", "platinum"]>>;
    email_verified: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "email", "last_name"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "email" | "last_name" | "created_at";
    sort_order?: "asc" | "desc";
}, {
    email?: string;
    loyalty_tier?: "bronze" | "silver" | "gold" | "platinum";
    email_verified?: boolean;
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "email" | "last_name" | "created_at";
    sort_order?: "asc" | "desc";
}>;
export declare const brandSchema: z.ZodObject<{
    brand_id: z.ZodString;
    brand_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    logo_url: z.ZodNullable<z.ZodString>;
    heritage_story: z.ZodNullable<z.ZodString>;
    country_origin: z.ZodNullable<z.ZodString>;
    is_niche_brand: z.ZodBoolean;
    display_order: z.ZodNumber;
    is_active: z.ZodBoolean;
    created_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    created_at?: Date;
    brand_id?: string;
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}, {
    created_at?: Date;
    brand_id?: string;
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}>;
export declare const createBrandInputSchema: z.ZodObject<{
    brand_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    logo_url: z.ZodNullable<z.ZodString>;
    heritage_story: z.ZodNullable<z.ZodString>;
    country_origin: z.ZodNullable<z.ZodString>;
    is_niche_brand: z.ZodDefault<z.ZodBoolean>;
    display_order: z.ZodDefault<z.ZodNumber>;
    is_active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}, {
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}>;
export declare const updateBrandInputSchema: z.ZodObject<{
    brand_id: z.ZodString;
    brand_name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    logo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    heritage_story: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    country_origin: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_niche_brand: z.ZodOptional<z.ZodBoolean>;
    display_order: z.ZodOptional<z.ZodNumber>;
    is_active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    brand_id?: string;
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}, {
    brand_id?: string;
    brand_name?: string;
    description?: string;
    logo_url?: string;
    heritage_story?: string;
    country_origin?: string;
    is_niche_brand?: boolean;
    display_order?: number;
    is_active?: boolean;
}>;
export declare const searchBrandsInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    is_niche_brand: z.ZodOptional<z.ZodBoolean>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    country_origin: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["brand_name", "display_order", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "brand_name" | "display_order";
    sort_order?: "asc" | "desc";
    country_origin?: string;
    is_niche_brand?: boolean;
    is_active?: boolean;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "brand_name" | "display_order";
    sort_order?: "asc" | "desc";
    country_origin?: string;
    is_niche_brand?: boolean;
    is_active?: boolean;
}>;
export declare const categorySchema: z.ZodObject<{
    category_id: z.ZodString;
    category_name: z.ZodString;
    parent_category_id: z.ZodNullable<z.ZodString>;
    description: z.ZodNullable<z.ZodString>;
    display_order: z.ZodNumber;
    is_active: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_id?: string;
    category_name?: string;
    parent_category_id?: string;
}, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_id?: string;
    category_name?: string;
    parent_category_id?: string;
}>;
export declare const createCategoryInputSchema: z.ZodObject<{
    category_name: z.ZodString;
    parent_category_id: z.ZodNullable<z.ZodString>;
    description: z.ZodNullable<z.ZodString>;
    display_order: z.ZodDefault<z.ZodNumber>;
    is_active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_name?: string;
    parent_category_id?: string;
}, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_name?: string;
    parent_category_id?: string;
}>;
export declare const updateCategoryInputSchema: z.ZodObject<{
    category_id: z.ZodString;
    category_name: z.ZodOptional<z.ZodString>;
    parent_category_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    display_order: z.ZodOptional<z.ZodNumber>;
    is_active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_id?: string;
    category_name?: string;
    parent_category_id?: string;
}, {
    description?: string;
    display_order?: number;
    is_active?: boolean;
    category_id?: string;
    category_name?: string;
    parent_category_id?: string;
}>;
export declare const searchCategoriesInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    parent_category_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["category_name", "display_order"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "display_order" | "category_name";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    parent_category_id?: string;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "display_order" | "category_name";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    parent_category_id?: string;
}>;
export declare const productSchema: z.ZodObject<{
    product_id: z.ZodString;
    brand_id: z.ZodString;
    category_id: z.ZodString;
    product_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    short_description: z.ZodNullable<z.ZodString>;
    fragrance_families: z.ZodString;
    concentration: z.ZodString;
    gender_category: z.ZodString;
    top_notes: z.ZodNullable<z.ZodString>;
    middle_notes: z.ZodNullable<z.ZodString>;
    base_notes: z.ZodNullable<z.ZodString>;
    complete_notes_list: z.ZodNullable<z.ZodString>;
    occasion_tags: z.ZodNullable<z.ZodString>;
    season_suitability: z.ZodNullable<z.ZodString>;
    longevity_hours: z.ZodNullable<z.ZodNumber>;
    sillage_rating: z.ZodNullable<z.ZodNumber>;
    intensity_level: z.ZodNullable<z.ZodString>;
    ingredients_list: z.ZodNullable<z.ZodString>;
    care_instructions: z.ZodNullable<z.ZodString>;
    base_price: z.ZodNumber;
    sale_price: z.ZodNullable<z.ZodNumber>;
    availability_status: z.ZodString;
    is_featured: z.ZodBoolean;
    is_new_arrival: z.ZodBoolean;
    is_limited_edition: z.ZodBoolean;
    sku_prefix: z.ZodString;
    weight_grams: z.ZodNullable<z.ZodNumber>;
    launch_date: z.ZodNullable<z.ZodString>;
    meta_title: z.ZodNullable<z.ZodString>;
    meta_description: z.ZodNullable<z.ZodString>;
    sort_order: z.ZodNumber;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    created_at?: Date;
    updated_at?: Date;
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: string;
    gender_category?: string;
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: string;
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: string;
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}, {
    created_at?: Date;
    updated_at?: Date;
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: string;
    gender_category?: string;
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: string;
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: string;
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}>;
export declare const createProductInputSchema: z.ZodObject<{
    brand_id: z.ZodString;
    category_id: z.ZodString;
    product_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    short_description: z.ZodNullable<z.ZodString>;
    fragrance_families: z.ZodString;
    concentration: z.ZodEnum<["Eau de Cologne", "Eau de Toilette", "Eau de Parfum", "Parfum", "Extrait de Parfum"]>;
    gender_category: z.ZodEnum<["Men", "Women", "Unisex"]>;
    top_notes: z.ZodNullable<z.ZodString>;
    middle_notes: z.ZodNullable<z.ZodString>;
    base_notes: z.ZodNullable<z.ZodString>;
    complete_notes_list: z.ZodNullable<z.ZodString>;
    occasion_tags: z.ZodNullable<z.ZodString>;
    season_suitability: z.ZodNullable<z.ZodString>;
    longevity_hours: z.ZodNullable<z.ZodNumber>;
    sillage_rating: z.ZodNullable<z.ZodNumber>;
    intensity_level: z.ZodNullable<z.ZodEnum<["Very Light", "Light", "Moderate", "Strong", "Very Strong"]>>;
    ingredients_list: z.ZodNullable<z.ZodString>;
    care_instructions: z.ZodNullable<z.ZodString>;
    base_price: z.ZodNumber;
    sale_price: z.ZodNullable<z.ZodNumber>;
    availability_status: z.ZodDefault<z.ZodEnum<["in_stock", "out_of_stock", "discontinued", "preorder"]>>;
    is_featured: z.ZodDefault<z.ZodBoolean>;
    is_new_arrival: z.ZodDefault<z.ZodBoolean>;
    is_limited_edition: z.ZodDefault<z.ZodBoolean>;
    sku_prefix: z.ZodString;
    weight_grams: z.ZodNullable<z.ZodNumber>;
    launch_date: z.ZodNullable<z.ZodString>;
    meta_title: z.ZodNullable<z.ZodString>;
    meta_description: z.ZodNullable<z.ZodString>;
    sort_order: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: "Very Light" | "Light" | "Moderate" | "Strong" | "Very Strong";
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}, {
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: "Very Light" | "Light" | "Moderate" | "Strong" | "Very Strong";
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}>;
export declare const updateProductInputSchema: z.ZodObject<{
    product_id: z.ZodString;
    brand_id: z.ZodOptional<z.ZodString>;
    category_id: z.ZodOptional<z.ZodString>;
    product_name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    short_description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fragrance_families: z.ZodOptional<z.ZodString>;
    concentration: z.ZodOptional<z.ZodEnum<["Eau de Cologne", "Eau de Toilette", "Eau de Parfum", "Parfum", "Extrait de Parfum"]>>;
    gender_category: z.ZodOptional<z.ZodEnum<["Men", "Women", "Unisex"]>>;
    top_notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    middle_notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    base_notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    complete_notes_list: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    occasion_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    season_suitability: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    longevity_hours: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sillage_rating: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    intensity_level: z.ZodOptional<z.ZodNullable<z.ZodEnum<["Very Light", "Light", "Moderate", "Strong", "Very Strong"]>>>;
    ingredients_list: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    care_instructions: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    base_price: z.ZodOptional<z.ZodNumber>;
    sale_price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    availability_status: z.ZodOptional<z.ZodEnum<["in_stock", "out_of_stock", "discontinued", "preorder"]>>;
    is_featured: z.ZodOptional<z.ZodBoolean>;
    is_new_arrival: z.ZodOptional<z.ZodBoolean>;
    is_limited_edition: z.ZodOptional<z.ZodBoolean>;
    sku_prefix: z.ZodOptional<z.ZodString>;
    weight_grams: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    launch_date: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    meta_title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    meta_description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sort_order: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: "Very Light" | "Light" | "Moderate" | "Strong" | "Very Strong";
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}, {
    sort_order?: number;
    brand_id?: string;
    description?: string;
    category_id?: string;
    product_id?: string;
    product_name?: string;
    short_description?: string;
    fragrance_families?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    top_notes?: string;
    middle_notes?: string;
    base_notes?: string;
    complete_notes_list?: string;
    occasion_tags?: string;
    season_suitability?: string;
    longevity_hours?: number;
    sillage_rating?: number;
    intensity_level?: "Very Light" | "Light" | "Moderate" | "Strong" | "Very Strong";
    ingredients_list?: string;
    care_instructions?: string;
    base_price?: number;
    sale_price?: number;
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    sku_prefix?: string;
    weight_grams?: number;
    launch_date?: string;
    meta_title?: string;
    meta_description?: string;
}>;
export declare const searchProductsInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    brand_id: z.ZodOptional<z.ZodString>;
    category_id: z.ZodOptional<z.ZodString>;
    gender_category: z.ZodOptional<z.ZodEnum<["Men", "Women", "Unisex"]>>;
    concentration: z.ZodOptional<z.ZodEnum<["Eau de Cologne", "Eau de Toilette", "Eau de Parfum", "Parfum", "Extrait de Parfum"]>>;
    availability_status: z.ZodOptional<z.ZodEnum<["in_stock", "out_of_stock", "discontinued", "preorder"]>>;
    is_featured: z.ZodOptional<z.ZodBoolean>;
    is_new_arrival: z.ZodOptional<z.ZodBoolean>;
    is_limited_edition: z.ZodOptional<z.ZodBoolean>;
    price_min: z.ZodOptional<z.ZodNumber>;
    price_max: z.ZodOptional<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["product_name", "base_price", "created_at", "sort_order"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "sort_order" | "product_name" | "base_price";
    sort_order?: "asc" | "desc";
    brand_id?: string;
    category_id?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    price_min?: number;
    price_max?: number;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "sort_order" | "product_name" | "base_price";
    sort_order?: "asc" | "desc";
    brand_id?: string;
    category_id?: string;
    concentration?: "Eau de Cologne" | "Eau de Toilette" | "Eau de Parfum" | "Parfum" | "Extrait de Parfum";
    gender_category?: "Men" | "Women" | "Unisex";
    availability_status?: "in_stock" | "out_of_stock" | "discontinued" | "preorder";
    is_featured?: boolean;
    is_new_arrival?: boolean;
    is_limited_edition?: boolean;
    price_min?: number;
    price_max?: number;
}>;
export declare const productSizeSchema: z.ZodObject<{
    size_id: z.ZodString;
    product_id: z.ZodString;
    size_ml: z.ZodNumber;
    price: z.ZodNumber;
    sale_price: z.ZodNullable<z.ZodNumber>;
    stock_quantity: z.ZodNumber;
    reserved_quantity: z.ZodNumber;
    low_stock_threshold: z.ZodNumber;
    sku: z.ZodString;
    is_sample_available: z.ZodBoolean;
    sample_price: z.ZodNullable<z.ZodNumber>;
    is_active: z.ZodBoolean;
    created_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    created_at?: Date;
    is_active?: boolean;
    product_id?: string;
    sale_price?: number;
    size_id?: string;
    size_ml?: number;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    sku?: string;
    is_sample_available?: boolean;
    sample_price?: number;
}, {
    created_at?: Date;
    is_active?: boolean;
    product_id?: string;
    sale_price?: number;
    size_id?: string;
    size_ml?: number;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    sku?: string;
    is_sample_available?: boolean;
    sample_price?: number;
}>;
export declare const createProductSizeInputSchema: z.ZodObject<{
    product_id: z.ZodString;
    size_ml: z.ZodNumber;
    price: z.ZodNumber;
    sale_price: z.ZodNullable<z.ZodNumber>;
    stock_quantity: z.ZodDefault<z.ZodNumber>;
    reserved_quantity: z.ZodDefault<z.ZodNumber>;
    low_stock_threshold: z.ZodDefault<z.ZodNumber>;
    sku: z.ZodString;
    is_sample_available: z.ZodDefault<z.ZodBoolean>;
    sample_price: z.ZodNullable<z.ZodNumber>;
    is_active: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    is_active?: boolean;
    product_id?: string;
    sale_price?: number;
    size_ml?: number;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    sku?: string;
    is_sample_available?: boolean;
    sample_price?: number;
}, {
    is_active?: boolean;
    product_id?: string;
    sale_price?: number;
    size_ml?: number;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    sku?: string;
    is_sample_available?: boolean;
    sample_price?: number;
}>;
export declare const updateProductSizeInputSchema: z.ZodObject<{
    size_id: z.ZodString;
    price: z.ZodOptional<z.ZodNumber>;
    sale_price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    stock_quantity: z.ZodOptional<z.ZodNumber>;
    reserved_quantity: z.ZodOptional<z.ZodNumber>;
    low_stock_threshold: z.ZodOptional<z.ZodNumber>;
    is_sample_available: z.ZodOptional<z.ZodBoolean>;
    sample_price: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    is_active?: boolean;
    sale_price?: number;
    size_id?: string;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    is_sample_available?: boolean;
    sample_price?: number;
}, {
    is_active?: boolean;
    sale_price?: number;
    size_id?: string;
    price?: number;
    stock_quantity?: number;
    reserved_quantity?: number;
    low_stock_threshold?: number;
    is_sample_available?: boolean;
    sample_price?: number;
}>;
export declare const searchProductSizesInputSchema: z.ZodObject<{
    product_id: z.ZodOptional<z.ZodString>;
    size_ml: z.ZodOptional<z.ZodNumber>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    low_stock: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["size_ml", "price", "stock_quantity"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "size_ml" | "price" | "stock_quantity";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    product_id?: string;
    size_ml?: number;
    low_stock?: boolean;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "size_ml" | "price" | "stock_quantity";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    product_id?: string;
    size_ml?: number;
    low_stock?: boolean;
}>;
export declare const orderSchema: z.ZodObject<{
    order_id: z.ZodString;
    user_id: z.ZodNullable<z.ZodString>;
    order_number: z.ZodString;
    order_status: z.ZodString;
    payment_status: z.ZodString;
    fulfillment_status: z.ZodString;
    subtotal: z.ZodNumber;
    tax_amount: z.ZodNumber;
    shipping_cost: z.ZodNumber;
    discount_amount: z.ZodNumber;
    total_amount: z.ZodNumber;
    currency: z.ZodString;
    shipping_address_id: z.ZodString;
    billing_address_id: z.ZodString;
    shipping_method_id: z.ZodString;
    payment_method_id: z.ZodNullable<z.ZodString>;
    tracking_number: z.ZodNullable<z.ZodString>;
    shipped_at: z.ZodNullable<z.ZodString>;
    delivered_at: z.ZodNullable<z.ZodString>;
    gift_message: z.ZodNullable<z.ZodString>;
    special_instructions: z.ZodNullable<z.ZodString>;
    customer_email: z.ZodString;
    customer_phone: z.ZodNullable<z.ZodString>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    order_id?: string;
    order_number?: string;
    order_status?: string;
    payment_status?: string;
    fulfillment_status?: string;
    subtotal?: number;
    tax_amount?: number;
    shipping_cost?: number;
    discount_amount?: number;
    total_amount?: number;
    currency?: string;
    shipping_address_id?: string;
    billing_address_id?: string;
    shipping_method_id?: string;
    payment_method_id?: string;
    tracking_number?: string;
    shipped_at?: string;
    delivered_at?: string;
    gift_message?: string;
    special_instructions?: string;
    customer_email?: string;
    customer_phone?: string;
}, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    order_id?: string;
    order_number?: string;
    order_status?: string;
    payment_status?: string;
    fulfillment_status?: string;
    subtotal?: number;
    tax_amount?: number;
    shipping_cost?: number;
    discount_amount?: number;
    total_amount?: number;
    currency?: string;
    shipping_address_id?: string;
    billing_address_id?: string;
    shipping_method_id?: string;
    payment_method_id?: string;
    tracking_number?: string;
    shipped_at?: string;
    delivered_at?: string;
    gift_message?: string;
    special_instructions?: string;
    customer_email?: string;
    customer_phone?: string;
}>;
export declare const createOrderInputSchema: z.ZodObject<{
    user_id: z.ZodNullable<z.ZodString>;
    order_status: z.ZodDefault<z.ZodEnum<["pending", "processing", "shipped", "delivered", "cancelled", "refunded"]>>;
    payment_status: z.ZodDefault<z.ZodEnum<["pending", "paid", "failed", "refunded", "partially_refunded"]>>;
    fulfillment_status: z.ZodDefault<z.ZodEnum<["unfulfilled", "partial", "fulfilled"]>>;
    subtotal: z.ZodNumber;
    tax_amount: z.ZodDefault<z.ZodNumber>;
    shipping_cost: z.ZodDefault<z.ZodNumber>;
    discount_amount: z.ZodDefault<z.ZodNumber>;
    total_amount: z.ZodNumber;
    currency: z.ZodDefault<z.ZodString>;
    shipping_address_id: z.ZodString;
    billing_address_id: z.ZodString;
    shipping_method_id: z.ZodString;
    payment_method_id: z.ZodNullable<z.ZodString>;
    gift_message: z.ZodNullable<z.ZodString>;
    special_instructions: z.ZodNullable<z.ZodString>;
    customer_email: z.ZodString;
    customer_phone: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    subtotal?: number;
    tax_amount?: number;
    shipping_cost?: number;
    discount_amount?: number;
    total_amount?: number;
    currency?: string;
    shipping_address_id?: string;
    billing_address_id?: string;
    shipping_method_id?: string;
    payment_method_id?: string;
    gift_message?: string;
    special_instructions?: string;
    customer_email?: string;
    customer_phone?: string;
}, {
    user_id?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    subtotal?: number;
    tax_amount?: number;
    shipping_cost?: number;
    discount_amount?: number;
    total_amount?: number;
    currency?: string;
    shipping_address_id?: string;
    billing_address_id?: string;
    shipping_method_id?: string;
    payment_method_id?: string;
    gift_message?: string;
    special_instructions?: string;
    customer_email?: string;
    customer_phone?: string;
}>;
export declare const updateOrderInputSchema: z.ZodObject<{
    order_id: z.ZodString;
    order_status: z.ZodOptional<z.ZodEnum<["pending", "processing", "shipped", "delivered", "cancelled", "refunded"]>>;
    payment_status: z.ZodOptional<z.ZodEnum<["pending", "paid", "failed", "refunded", "partially_refunded"]>>;
    fulfillment_status: z.ZodOptional<z.ZodEnum<["unfulfilled", "partial", "fulfilled"]>>;
    tracking_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    shipped_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delivered_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    special_instructions: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    order_id?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    tracking_number?: string;
    shipped_at?: string;
    delivered_at?: string;
    special_instructions?: string;
}, {
    order_id?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    tracking_number?: string;
    shipped_at?: string;
    delivered_at?: string;
    special_instructions?: string;
}>;
export declare const searchOrdersInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    order_number: z.ZodOptional<z.ZodString>;
    order_status: z.ZodOptional<z.ZodEnum<["pending", "processing", "shipped", "delivered", "cancelled", "refunded"]>>;
    payment_status: z.ZodOptional<z.ZodEnum<["pending", "paid", "failed", "refunded", "partially_refunded"]>>;
    fulfillment_status: z.ZodOptional<z.ZodEnum<["unfulfilled", "partial", "fulfilled"]>>;
    customer_email: z.ZodOptional<z.ZodString>;
    date_from: z.ZodOptional<z.ZodDate>;
    date_to: z.ZodOptional<z.ZodDate>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "total_amount", "order_number"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "order_number" | "total_amount";
    sort_order?: "asc" | "desc";
    order_number?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    customer_email?: string;
    date_from?: Date;
    date_to?: Date;
}, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "order_number" | "total_amount";
    sort_order?: "asc" | "desc";
    order_number?: string;
    order_status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
    payment_status?: "pending" | "refunded" | "paid" | "failed" | "partially_refunded";
    fulfillment_status?: "unfulfilled" | "partial" | "fulfilled";
    customer_email?: string;
    date_from?: Date;
    date_to?: Date;
}>;
export declare const cartSchema: z.ZodObject<{
    cart_id: z.ZodString;
    user_id: z.ZodNullable<z.ZodString>;
    session_id: z.ZodNullable<z.ZodString>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    cart_id?: string;
    session_id?: string;
}, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    cart_id?: string;
    session_id?: string;
}>;
export declare const createCartInputSchema: z.ZodObject<{
    user_id: z.ZodNullable<z.ZodString>;
    session_id: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    session_id?: string;
}, {
    user_id?: string;
    session_id?: string;
}>;
export declare const updateCartInputSchema: z.ZodObject<{
    cart_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    session_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    cart_id?: string;
    session_id?: string;
}, {
    user_id?: string;
    cart_id?: string;
    session_id?: string;
}>;
export declare const searchCartsInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    session_id: z.ZodOptional<z.ZodString>;
    date_from: z.ZodOptional<z.ZodDate>;
    date_to: z.ZodOptional<z.ZodDate>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "updated_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "updated_at";
    sort_order?: "asc" | "desc";
    date_from?: Date;
    date_to?: Date;
    session_id?: string;
}, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "updated_at";
    sort_order?: "asc" | "desc";
    date_from?: Date;
    date_to?: Date;
    session_id?: string;
}>;
export declare const cartItemSchema: z.ZodObject<{
    cart_item_id: z.ZodString;
    cart_id: z.ZodString;
    product_id: z.ZodString;
    size_ml: z.ZodNumber;
    quantity: z.ZodNumber;
    unit_price: z.ZodNumber;
    gift_wrap: z.ZodBoolean;
    sample_included: z.ZodBoolean;
    added_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    product_id?: string;
    size_ml?: number;
    cart_id?: string;
    cart_item_id?: string;
    quantity?: number;
    unit_price?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
    added_at?: Date;
}, {
    product_id?: string;
    size_ml?: number;
    cart_id?: string;
    cart_item_id?: string;
    quantity?: number;
    unit_price?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
    added_at?: Date;
}>;
export declare const createCartItemInputSchema: z.ZodObject<{
    cart_id: z.ZodString;
    product_id: z.ZodString;
    size_ml: z.ZodNumber;
    quantity: z.ZodDefault<z.ZodNumber>;
    unit_price: z.ZodNumber;
    gift_wrap: z.ZodDefault<z.ZodBoolean>;
    sample_included: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    product_id?: string;
    size_ml?: number;
    cart_id?: string;
    quantity?: number;
    unit_price?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
}, {
    product_id?: string;
    size_ml?: number;
    cart_id?: string;
    quantity?: number;
    unit_price?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
}>;
export declare const updateCartItemInputSchema: z.ZodObject<{
    cart_item_id: z.ZodString;
    quantity: z.ZodOptional<z.ZodNumber>;
    gift_wrap: z.ZodOptional<z.ZodBoolean>;
    sample_included: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    cart_item_id?: string;
    quantity?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
}, {
    cart_item_id?: string;
    quantity?: number;
    gift_wrap?: boolean;
    sample_included?: boolean;
}>;
export declare const searchCartItemsInputSchema: z.ZodObject<{
    cart_id: z.ZodOptional<z.ZodString>;
    product_id: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["added_at", "unit_price"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "unit_price" | "added_at";
    sort_order?: "asc" | "desc";
    product_id?: string;
    cart_id?: string;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "unit_price" | "added_at";
    sort_order?: "asc" | "desc";
    product_id?: string;
    cart_id?: string;
}>;
export declare const addressSchema: z.ZodObject<{
    address_id: z.ZodString;
    user_id: z.ZodString;
    address_type: z.ZodString;
    first_name: z.ZodString;
    last_name: z.ZodString;
    company: z.ZodNullable<z.ZodString>;
    address_line_1: z.ZodString;
    address_line_2: z.ZodNullable<z.ZodString>;
    city: z.ZodString;
    state_province: z.ZodString;
    postal_code: z.ZodString;
    country: z.ZodString;
    phone_number: z.ZodNullable<z.ZodString>;
    is_default: z.ZodBoolean;
    created_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    created_at?: Date;
    address_id?: string;
    address_type?: string;
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}, {
    user_id?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    created_at?: Date;
    address_id?: string;
    address_type?: string;
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}>;
export declare const createAddressInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    address_type: z.ZodEnum<["shipping", "billing", "both"]>;
    first_name: z.ZodString;
    last_name: z.ZodString;
    company: z.ZodNullable<z.ZodString>;
    address_line_1: z.ZodString;
    address_line_2: z.ZodNullable<z.ZodString>;
    city: z.ZodString;
    state_province: z.ZodString;
    postal_code: z.ZodString;
    country: z.ZodString;
    phone_number: z.ZodNullable<z.ZodString>;
    is_default: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    address_type?: "shipping" | "billing" | "both";
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}, {
    user_id?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    address_type?: "shipping" | "billing" | "both";
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}>;
export declare const updateAddressInputSchema: z.ZodObject<{
    address_id: z.ZodString;
    address_type: z.ZodOptional<z.ZodEnum<["shipping", "billing", "both"]>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    company: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    address_line_1: z.ZodOptional<z.ZodString>;
    address_line_2: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    city: z.ZodOptional<z.ZodString>;
    state_province: z.ZodOptional<z.ZodString>;
    postal_code: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    phone_number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    address_id?: string;
    address_type?: "shipping" | "billing" | "both";
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}, {
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    address_id?: string;
    address_type?: "shipping" | "billing" | "both";
    company?: string;
    address_line_1?: string;
    address_line_2?: string;
    city?: string;
    state_province?: string;
    postal_code?: string;
    country?: string;
    is_default?: boolean;
}>;
export declare const searchAddressesInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    address_type: z.ZodOptional<z.ZodEnum<["shipping", "billing", "both"]>>;
    country: z.ZodOptional<z.ZodString>;
    is_default: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "last_name", "city"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "last_name" | "created_at" | "city";
    sort_order?: "asc" | "desc";
    address_type?: "shipping" | "billing" | "both";
    country?: string;
    is_default?: boolean;
}, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "last_name" | "created_at" | "city";
    sort_order?: "asc" | "desc";
    address_type?: "shipping" | "billing" | "both";
    country?: string;
    is_default?: boolean;
}>;
export declare const reviewSchema: z.ZodObject<{
    review_id: z.ZodString;
    product_id: z.ZodString;
    user_id: z.ZodString;
    order_id: z.ZodNullable<z.ZodString>;
    rating: z.ZodNumber;
    title: z.ZodNullable<z.ZodString>;
    review_text: z.ZodNullable<z.ZodString>;
    longevity_rating: z.ZodNullable<z.ZodNumber>;
    sillage_rating: z.ZodNullable<z.ZodNumber>;
    occasion_tags: z.ZodNullable<z.ZodString>;
    season_tags: z.ZodNullable<z.ZodString>;
    is_verified_purchase: z.ZodBoolean;
    helpful_votes: z.ZodNumber;
    total_votes: z.ZodNumber;
    is_featured: z.ZodBoolean;
    moderation_status: z.ZodString;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    product_id?: string;
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    order_id?: string;
    review_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    is_verified_purchase?: boolean;
    helpful_votes?: number;
    total_votes?: number;
    moderation_status?: string;
}, {
    user_id?: string;
    created_at?: Date;
    updated_at?: Date;
    product_id?: string;
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    order_id?: string;
    review_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    is_verified_purchase?: boolean;
    helpful_votes?: number;
    total_votes?: number;
    moderation_status?: string;
}>;
export declare const createReviewInputSchema: z.ZodObject<{
    product_id: z.ZodString;
    user_id: z.ZodString;
    order_id: z.ZodNullable<z.ZodString>;
    rating: z.ZodNumber;
    title: z.ZodNullable<z.ZodString>;
    review_text: z.ZodNullable<z.ZodString>;
    longevity_rating: z.ZodNullable<z.ZodNumber>;
    sillage_rating: z.ZodNullable<z.ZodNumber>;
    occasion_tags: z.ZodNullable<z.ZodString>;
    season_tags: z.ZodNullable<z.ZodString>;
    is_verified_purchase: z.ZodDefault<z.ZodBoolean>;
    helpful_votes: z.ZodDefault<z.ZodNumber>;
    total_votes: z.ZodDefault<z.ZodNumber>;
    is_featured: z.ZodDefault<z.ZodBoolean>;
    moderation_status: z.ZodDefault<z.ZodEnum<["pending", "approved", "rejected"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    product_id?: string;
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    order_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    is_verified_purchase?: boolean;
    helpful_votes?: number;
    total_votes?: number;
    moderation_status?: "pending" | "approved" | "rejected";
}, {
    user_id?: string;
    product_id?: string;
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    order_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    is_verified_purchase?: boolean;
    helpful_votes?: number;
    total_votes?: number;
    moderation_status?: "pending" | "approved" | "rejected";
}>;
export declare const updateReviewInputSchema: z.ZodObject<{
    review_id: z.ZodString;
    rating: z.ZodOptional<z.ZodNumber>;
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    review_text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    longevity_rating: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    sillage_rating: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    occasion_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    season_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_featured: z.ZodOptional<z.ZodBoolean>;
    moderation_status: z.ZodOptional<z.ZodEnum<["pending", "approved", "rejected"]>>;
}, "strip", z.ZodTypeAny, {
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    review_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    moderation_status?: "pending" | "approved" | "rejected";
}, {
    occasion_tags?: string;
    sillage_rating?: number;
    is_featured?: boolean;
    review_id?: string;
    rating?: number;
    title?: string;
    review_text?: string;
    longevity_rating?: number;
    season_tags?: string;
    moderation_status?: "pending" | "approved" | "rejected";
}>;
export declare const searchReviewsInputSchema: z.ZodObject<{
    product_id: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    rating: z.ZodOptional<z.ZodNumber>;
    moderation_status: z.ZodOptional<z.ZodEnum<["pending", "approved", "rejected"]>>;
    is_verified_purchase: z.ZodOptional<z.ZodBoolean>;
    is_featured: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "rating", "helpful_votes"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "rating" | "helpful_votes";
    sort_order?: "asc" | "desc";
    product_id?: string;
    is_featured?: boolean;
    rating?: number;
    is_verified_purchase?: boolean;
    moderation_status?: "pending" | "approved" | "rejected";
}, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "rating" | "helpful_votes";
    sort_order?: "asc" | "desc";
    product_id?: string;
    is_featured?: boolean;
    rating?: number;
    is_verified_purchase?: boolean;
    moderation_status?: "pending" | "approved" | "rejected";
}>;
export declare const wishlistSchema: z.ZodObject<{
    wishlist_id: z.ZodString;
    user_id: z.ZodString;
    wishlist_name: z.ZodString;
    is_public: z.ZodBoolean;
    is_default: z.ZodBoolean;
    share_token: z.ZodNullable<z.ZodString>;
    created_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    created_at?: Date;
    is_default?: boolean;
    wishlist_id?: string;
    wishlist_name?: string;
    is_public?: boolean;
    share_token?: string;
}, {
    user_id?: string;
    created_at?: Date;
    is_default?: boolean;
    wishlist_id?: string;
    wishlist_name?: string;
    is_public?: boolean;
    share_token?: string;
}>;
export declare const createWishlistInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    wishlist_name: z.ZodDefault<z.ZodString>;
    is_public: z.ZodDefault<z.ZodBoolean>;
    is_default: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    is_default?: boolean;
    wishlist_name?: string;
    is_public?: boolean;
}, {
    user_id?: string;
    is_default?: boolean;
    wishlist_name?: string;
    is_public?: boolean;
}>;
export declare const updateWishlistInputSchema: z.ZodObject<{
    wishlist_id: z.ZodString;
    wishlist_name: z.ZodOptional<z.ZodString>;
    is_public: z.ZodOptional<z.ZodBoolean>;
    is_default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    is_default?: boolean;
    wishlist_id?: string;
    wishlist_name?: string;
    is_public?: boolean;
}, {
    is_default?: boolean;
    wishlist_id?: string;
    wishlist_name?: string;
    is_public?: boolean;
}>;
export declare const searchWishlistsInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    is_public: z.ZodOptional<z.ZodBoolean>;
    is_default: z.ZodOptional<z.ZodBoolean>;
    share_token: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "wishlist_name"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "wishlist_name";
    sort_order?: "asc" | "desc";
    is_default?: boolean;
    is_public?: boolean;
    share_token?: string;
}, {
    user_id?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "wishlist_name";
    sort_order?: "asc" | "desc";
    is_default?: boolean;
    is_public?: boolean;
    share_token?: string;
}>;
export declare const wishlistItemSchema: z.ZodObject<{
    wishlist_item_id: z.ZodString;
    wishlist_id: z.ZodString;
    product_id: z.ZodString;
    size_ml: z.ZodNullable<z.ZodNumber>;
    notes: z.ZodNullable<z.ZodString>;
    added_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    product_id?: string;
    size_ml?: number;
    added_at?: Date;
    wishlist_id?: string;
    wishlist_item_id?: string;
    notes?: string;
}, {
    product_id?: string;
    size_ml?: number;
    added_at?: Date;
    wishlist_id?: string;
    wishlist_item_id?: string;
    notes?: string;
}>;
export declare const createWishlistItemInputSchema: z.ZodObject<{
    wishlist_id: z.ZodString;
    product_id: z.ZodString;
    size_ml: z.ZodNullable<z.ZodNumber>;
    notes: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    product_id?: string;
    size_ml?: number;
    wishlist_id?: string;
    notes?: string;
}, {
    product_id?: string;
    size_ml?: number;
    wishlist_id?: string;
    notes?: string;
}>;
export declare const updateWishlistItemInputSchema: z.ZodObject<{
    wishlist_item_id: z.ZodString;
    size_ml: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    size_ml?: number;
    wishlist_item_id?: string;
    notes?: string;
}, {
    size_ml?: number;
    wishlist_item_id?: string;
    notes?: string;
}>;
export declare const searchWishlistItemsInputSchema: z.ZodObject<{
    wishlist_id: z.ZodOptional<z.ZodString>;
    product_id: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["added_at", "product_name"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "product_name" | "added_at";
    sort_order?: "asc" | "desc";
    product_id?: string;
    wishlist_id?: string;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "product_name" | "added_at";
    sort_order?: "asc" | "desc";
    product_id?: string;
    wishlist_id?: string;
}>;
export declare const shippingMethodSchema: z.ZodObject<{
    shipping_method_id: z.ZodString;
    method_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    cost: z.ZodNumber;
    free_threshold: z.ZodNullable<z.ZodNumber>;
    estimated_days_min: z.ZodNumber;
    estimated_days_max: z.ZodNumber;
    is_express: z.ZodBoolean;
    requires_signature: z.ZodBoolean;
    is_active: z.ZodBoolean;
    sort_order: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    shipping_method_id?: string;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    shipping_method_id?: string;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}>;
export declare const createShippingMethodInputSchema: z.ZodObject<{
    method_name: z.ZodString;
    description: z.ZodNullable<z.ZodString>;
    cost: z.ZodNumber;
    free_threshold: z.ZodNullable<z.ZodNumber>;
    estimated_days_min: z.ZodNumber;
    estimated_days_max: z.ZodNumber;
    is_express: z.ZodDefault<z.ZodBoolean>;
    requires_signature: z.ZodDefault<z.ZodBoolean>;
    is_active: z.ZodDefault<z.ZodBoolean>;
    sort_order: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}>;
export declare const updateShippingMethodInputSchema: z.ZodObject<{
    shipping_method_id: z.ZodString;
    method_name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    cost: z.ZodOptional<z.ZodNumber>;
    free_threshold: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    estimated_days_min: z.ZodOptional<z.ZodNumber>;
    estimated_days_max: z.ZodOptional<z.ZodNumber>;
    is_express: z.ZodOptional<z.ZodBoolean>;
    requires_signature: z.ZodOptional<z.ZodBoolean>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    sort_order: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    shipping_method_id?: string;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}, {
    sort_order?: number;
    description?: string;
    is_active?: boolean;
    shipping_method_id?: string;
    method_name?: string;
    cost?: number;
    free_threshold?: number;
    estimated_days_min?: number;
    estimated_days_max?: number;
    is_express?: boolean;
    requires_signature?: boolean;
}>;
export declare const searchShippingMethodsInputSchema: z.ZodObject<{
    is_active: z.ZodOptional<z.ZodBoolean>;
    is_express: z.ZodOptional<z.ZodBoolean>;
    requires_signature: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["sort_order", "cost", "method_name"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "sort_order" | "method_name" | "cost";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    is_express?: boolean;
    requires_signature?: boolean;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "sort_order" | "method_name" | "cost";
    sort_order?: "asc" | "desc";
    is_active?: boolean;
    is_express?: boolean;
    requires_signature?: boolean;
}>;
export type User = z.infer<typeof userSchema>;
export type CreateUserInput = z.infer<typeof createUserInputSchema>;
export type UpdateUserInput = z.infer<typeof updateUserInputSchema>;
export type SearchUsersInput = z.infer<typeof searchUsersInputSchema>;
export type Brand = z.infer<typeof brandSchema>;
export type CreateBrandInput = z.infer<typeof createBrandInputSchema>;
export type UpdateBrandInput = z.infer<typeof updateBrandInputSchema>;
export type SearchBrandsInput = z.infer<typeof searchBrandsInputSchema>;
export type Category = z.infer<typeof categorySchema>;
export type CreateCategoryInput = z.infer<typeof createCategoryInputSchema>;
export type UpdateCategoryInput = z.infer<typeof updateCategoryInputSchema>;
export type SearchCategoriesInput = z.infer<typeof searchCategoriesInputSchema>;
export type Product = z.infer<typeof productSchema>;
export type CreateProductInput = z.infer<typeof createProductInputSchema>;
export type UpdateProductInput = z.infer<typeof updateProductInputSchema>;
export type SearchProductsInput = z.infer<typeof searchProductsInputSchema>;
export type ProductSize = z.infer<typeof productSizeSchema>;
export type CreateProductSizeInput = z.infer<typeof createProductSizeInputSchema>;
export type UpdateProductSizeInput = z.infer<typeof updateProductSizeInputSchema>;
export type SearchProductSizesInput = z.infer<typeof searchProductSizesInputSchema>;
export type Order = z.infer<typeof orderSchema>;
export type CreateOrderInput = z.infer<typeof createOrderInputSchema>;
export type UpdateOrderInput = z.infer<typeof updateOrderInputSchema>;
export type SearchOrdersInput = z.infer<typeof searchOrdersInputSchema>;
export type Cart = z.infer<typeof cartSchema>;
export type CreateCartInput = z.infer<typeof createCartInputSchema>;
export type UpdateCartInput = z.infer<typeof updateCartInputSchema>;
export type SearchCartsInput = z.infer<typeof searchCartsInputSchema>;
export type CartItem = z.infer<typeof cartItemSchema>;
export type CreateCartItemInput = z.infer<typeof createCartItemInputSchema>;
export type UpdateCartItemInput = z.infer<typeof updateCartItemInputSchema>;
export type SearchCartItemsInput = z.infer<typeof searchCartItemsInputSchema>;
export type Address = z.infer<typeof addressSchema>;
export type CreateAddressInput = z.infer<typeof createAddressInputSchema>;
export type UpdateAddressInput = z.infer<typeof updateAddressInputSchema>;
export type SearchAddressesInput = z.infer<typeof searchAddressesInputSchema>;
export type Review = z.infer<typeof reviewSchema>;
export type CreateReviewInput = z.infer<typeof createReviewInputSchema>;
export type UpdateReviewInput = z.infer<typeof updateReviewInputSchema>;
export type SearchReviewsInput = z.infer<typeof searchReviewsInputSchema>;
export type Wishlist = z.infer<typeof wishlistSchema>;
export type CreateWishlistInput = z.infer<typeof createWishlistInputSchema>;
export type UpdateWishlistInput = z.infer<typeof updateWishlistInputSchema>;
export type SearchWishlistsInput = z.infer<typeof searchWishlistsInputSchema>;
export type WishlistItem = z.infer<typeof wishlistItemSchema>;
export type CreateWishlistItemInput = z.infer<typeof createWishlistItemInputSchema>;
export type UpdateWishlistItemInput = z.infer<typeof updateWishlistItemInputSchema>;
export type SearchWishlistItemsInput = z.infer<typeof searchWishlistItemsInputSchema>;
export type ShippingMethod = z.infer<typeof shippingMethodSchema>;
export type CreateShippingMethodInput = z.infer<typeof createShippingMethodInputSchema>;
export type UpdateShippingMethodInput = z.infer<typeof updateShippingMethodInputSchema>;
export type SearchShippingMethodsInput = z.infer<typeof searchShippingMethodsInputSchema>;
//# sourceMappingURL=schema.d.ts.map